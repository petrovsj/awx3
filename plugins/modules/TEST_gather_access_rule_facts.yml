---
- name: ZPA Gather Access Rule Facts
  hosts: admin.zpabeta.net
  gather_facts: true

  tasks:
    - name: Get Details of All Policy Access Rules
      zscaler.zpacloud.zpa_policy_access_rule_facts:
        provider: "{{ zpa_cloud }}"

    - name: Get Details of a Policy Access Rule by Name
      zscaler.zpacloud.zpa_policy_access_rule_facts:
        provider: "{{ zpa_cloud }}"
        name: "Policy Access Rule - Example"

    - name: Get Details of a Policy Access Rule by ID
      zscaler.zpacloud.zpa_policy_access_rule_facts:
        provider: "{{ zpa_cloud }}"
        id: "216196257331291979"
"""

RETURN = """
# Returns information on a specified Policy Access Rule.
"""

from traceback import format_exc

from ansible.module_utils._text import to_native
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.zscaler.zpacloud.plugins.module_utils.zpa_client import (
    ZPAClientHelper,
)


def core(module):
    policy_rule_name = module.params.get("name", None)
    policy_rule_id = module.params.get("id", None)
    client = ZPAClientHelper(module)
    policy_rules = []
    if policy_rule_id is not None:
        policy_rule = client.policies.get_rule(
            policy_type="access", rule_id=policy_rule_id
        )
        if policy_rule is None:
            module.fail_json(msg="Failed to retrieve policy rule ID: '%s'" % (id))
        policy_rules = [policy_rule]
    elif policy_rule_name is not None:
        rules = client.policies.list_rules(policy_type="access").to_list()
        found = False
        for rule in rules:
            if rule.get("name") == policy_rule_name:
                policy_rules = [rule]
                found = True
                break
        if not found:
            module.fail_json(
                msg="Failed to retrieve policy rule Name: '%s'" % (policy_rule_name)
            )
    else:
        policy_rules = client.policies.list_rules(policy_type="access").to_list()
    module.exit_json(changed=False, policy_rules=policy_rules)


def main():
    argument_spec = ZPAClientHelper.zpa_argument_spec()
    argument_spec.update(
        name=dict(type="str", required=False),
        id=dict(type="str", required=False),
    )
    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)
    try:
        core(module)
    except Exception as e:
        module.fail_json(msg=to_native(e), exception=format_exc())


if __name__ == "__main__":
    main()
      
